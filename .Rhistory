how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
690/(2701+690)
2701/(2701+690)
1701/(1701+326)
16018/(16018+191)
library(RWeka)
iris_j48 <- J48(Species ~ ., data = iris)
iris_j48
summary(iris_j48)
plot(iris_j48)
install.packages("partykit")
plot(iris_j48)
install.packages("partykit")
library(RWeka)
iris_j48 <- J48(Species ~ ., data = iris)
iris_j48
plot(iris_j48)
install.packages("partykit")
install.packages("partykit")
install.packages("partykit")
plot(iris_j48)
install.packages("partykit")
plot(iris_j48)
eval_j48 <- evaluate_Weka_classifier(iris_j48, numFolds = 10, complexity = FALSE,
seed = 1, class = TRUE)
eval_j48
20/21
(19462-1073)/19462
(2347-675)/2347
19462+2646+2347
?qunif
qunif(0.75)
.7*.5+.3*.75
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
1/4
1/13
0
3/13
0
1/51
2/51
0.64
0.64
mypdf
mypdf(1.6)
integrate(mypdf,0,1.6)
1
sqrt(2)
10000*(1+8.39%*31/365)
10000*(1+0.0839*31/365)
20071×（1+0.0839×31/365）
20071*（1+0.0839×31/365）
20071*（1+0.0839*31/365）
20071*（1+0.0839*28/365）
10000*(1+1.2*334/365)
1.98082*365/(365+310)
100000*(1+1.07111*31/365)
10000*(1+1.07111)
100000*(1+1.07111*31/365)
20711.1+109097.1
1.098082*365/(365+310)
10000*(1+0.5937777)
100000*(1+0.593777*31/365)
15937.78+105043
1+1.2*31/365
1.098082*365/(365+3101)
?:
5/32
6/32
15^0/factorial(0)*exp(-0)
15^0/factorial(0)*exp(-15)
t <- 0; for (i in (1:10)){t <- t+ 15^i/factorial(i)*exp(-15)}
t
?quantile
?qnorm
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=7.5)
pnorm(1)
pnorm(0)
pnorm(14,mean=15,sd=10)
pnorm(16,mean=15,sd=10)
swirl()
library(swirl)
swirl()
0.001*0.997
0.015*0.999
0.001*0.997/(0.001*0.997+0.015*0.999)
6
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh+edl)
intergrate(function(x) {x*x/2}, lower=0, upper=2)
integrate(function(x) {x*x/2}, lower=0, upper=2)
integrate(myfunc,0, 2)
spop
mean(spop)
allsam
mean(allsam)
apply(allsam,1,mean)
mean(smeans)
6/2.3
2.26*sqrt(0.6/10)
2.26*sqrt(0.68/10)
sqrt(0.68/10)
sqrt(0.64/10)
1.86*.6
sqrt(0.128)
0.128*0.128*9/(0.06^2+0.068^2)
0.8*sqrt(0.2)
2/(0.8*sqrt(0.2))
(2.15+3.24)/2
sqrt((2.15+3.24)/9)
sqrt((2.15+3.24)/9)*1.746
sqrt(2*.64/10)
sqrt(2*.64/10)*2.101
---
0
?hist
load(ToothGrowth)
summary(ToothGrowth)
ToothGrouth
ToothGrowth
library(datasets)
summary(ToothGrowth)
fit <- lm (len ~ dose + supp, data = ToothGrowth)
summary (fit)
d0.5 <- subset (ToothGrowth, dose == 0.5)
d1.0 <- subset (ToothGrowth, dose == 1.0)
d2.0 <- subset (ToothGrowth, dose == 2.0)
test0.5 <- t.test (len ~ supp, paired = FALSE, var.equal = FALSE, data = d0.5)
test0.5
?cor.test
x<- c(140, 138, 150, 148,135)
y<- c(132,135,151,146,130)
t <- cor.test(x,y)
t
t <- cor.test(x,y,alternative = "two.sided")
t
?t.test
t <- t.test(x,y,alternative = "two.sided",paired=TRUE)
t
round(pbinom(2,size=4,prob=0.5,lower.tail=FALSE),2)
pbinom (3,size=4,prob = 0.5)
1100 + c(-1, 1) * qt(0.975, 8) * 30/sqrt(9)
ppois(10, lambda = 0.01 * 1787)
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
s <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2)/(n1 + n2 - 2))
ts <- (x1 - x2)/(s * sqrt(1/n1 + 1/n2))
2 * pt(ts, n1 + n2 - 2)
pnorm(1.645 * 0.004, mean = 0.01, sd = 0.004, lower.tail = FALSE)
ceiling((4 * (qnorm(0.95) - qnorm(0.1)))^2)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
fit <- lm( y ~ x)
fit
sum(x^2)
sum(x^2)/sum(x*y)
sum(x*y)/sum(x^2)
data(mtcars)
summary(mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
fit
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/std(x)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library("swirl")
swirl()
0
?InstallCourses
swirl()
install_from_swirl("Regression Models")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
fit
?lm
summary(fit)
library(dataset)
library(datasets)
summary(mtcars)
fit <- lm(mpg ~ weight, data=mtcars)
fit <- lm(mpg ~ wt, data=mtcars)
summary(fit)
predict(fit,3000,, interval="confidence"))
predict(fit,3000, interval="confidence"))
predict(fit,3000, interval="confidence")
predict(fit,data.frame(3000), interval="confidence")
predict(fit,data.frame(wt=3000), interval="confidence")
predict(fit,data.frame(wt=3), interval="confidence")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline,
| lwd=3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild, varRes+varEst)
fit <- lm(accel ~ mag+dist, attenu)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, data=galton)
fit <- lm(child ~ parent, galton)
sqrt((fit$residuals^2)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(residuals)
?deviance
sRes <- deviance(fit)
sRes/STot-1
sRes/sTot-1
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child,galton$parents)
cor(galton$child,galton$parents).^2
cor(galton$child,galton$parent).^2
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(trees)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees).
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, tree2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
install.packages("qdap")
library(qdap)
install.packages("qdap")
install.packages("qdap")
library(qdap)
install.packages("qdapTools")
install.packages("qdapTools")
library(qdap)
install.packages("caret")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
install.packages("minqa")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("nloptr")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("quantreg")
install.packages("quantreg")
install.packages("quantreg")
install.packages("quantreg")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
?createDataPartition
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
trainIndex
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list = FALSE)
trainIndex
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
dim(training)
dim(testing)
inTrain
t <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)
t[[2]]
t[[1]]
colnames(training)
hist(training$SuperPlasticizer )
hist(training$SuperPlasticizer)
hist(as.numeric(training$SuperPlasticizer))
summary(training$Superplasticizer)
typeof(training$Superplasticizer)
?hist
training$Superplasticizer
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
colnames(training)
na <- colnames(training)
grep("IL",na)
na[grep("IL",na)]
?grep
na[grep("^IL",na)]
IL_training <- training[,grep("^IL",na)]
dim(training)
prComp <- prcomp(IL_training)
prComp
prProc <- preProcess(IL_training, method="pca",pcaComp=2)
prProc
prProc
t <- predict(preProc,IL_training)
t <- predict(prProc,IL_training)
t
prProc <- preProcess(IL_training, method="pca",thresh=0.9)
prProc
training[,diagnosis]
dim(training[,diagnosis])
dim(training[,grep("diagnosis",na])
dim(training[,grep("diagnosis",na)])
na
dim(training[,grep("diagnosis",na)])
grep("diagnosis",na)
training[,grep("diagnosis",na)]
IL_training <- c(training[,grep("^IL",na)],training[,grep("diagnosis",na)])
dim(IL_training)
colnames(IL_training)
IL_training <- training[,grep("^IL",na)]
IL_training$diagnosis <- training$diagnosis
modFit <- train(diagnosis ~., data=IL_training,method="glm")
install.packages("e1071")
library(e1071)
modFit <- train(diagnosis ~., data=IL_training,method="glm")
modFit
?predict
IL_test <- testing[,grep("^IL",na)]
IL_test$diagnosis <- test$diagnosis
IL_test$diagnosis <- testing$diagnosis
pred <- predict(modFit,IL_test)
pred
pred==IL_test$diagnosis
sum(pred==IL_test$diagnosis)/length(pred)
prProc <- preProcess(IL_training[,1:12], method="pca",thresh=0.8)
prProc
trainPCA <- predict(prProc,IL_training[,1:12])
head(trainPCA)
trainPCA$diagnosis <- IL_training$diagnosis
head(trainPCA)
modFit <- train(diagnosis ~., data=trainPCA,method="glm")
testPCA <- predict(prProc,IL_test[,1:12])
testPCA$diagnosis <- IL_test$diagnosis
pred <- predict(modFit,testPCA)
print(sum(pred==IL_test$diagnosis)/length(pred))
1.96*sqrt(0.9651*(1-0.9651)/52173)
1.96*sqrt(0.9561*(1-0.9561)/52173)
1.96*sqrt(0.9675*(1-0.9675)/52173)
setwd("C://Work//Learning//Courses//Data Science9 - Developing Data Products//week 2//first_deck")
library(slidify)
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
install.pakcages("Rtools")
install.packages("Rtools")
install.packages("Rtools")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
library(plotrix)
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
slidify("index.md")
browseURL("index.html")
browseURL("index.html")
publish(user="wuandtan", repo="slidify")
?publish
slidify("index.md")
browseURL("index.html")
cd ..
setwd("C://Work//Learning//Courses//Data Science9 - Developing Data Products//project_2")
dir()
slidify("index.md")
slidify("index.md")
setwd("C://Work//Learning//Courses//Data Science9 - Developing Data Products")
author("project")
slidify("index.md")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
